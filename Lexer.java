/* The following code was generated by JFlex 1.7.0 */

   
/* --------------------------Usercode Section------------------------ */
   
import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>jflex_Sample1.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\46\1\47\1\46\1\47\22\0\1\75\1\61\3\0"+
    "\1\55\1\56\1\44\1\67\1\70\1\14\1\54\1\65\1\4\1\50"+
    "\1\13\1\42\11\1\1\66\1\62\1\53\1\52\1\51\1\74\1\0"+
    "\4\2\1\3\1\6\5\0\1\10\6\0\1\76\1\0\1\12\2\0"+
    "\1\43\2\0\1\71\1\45\1\72\1\57\1\0\1\0\1\15\1\20"+
    "\1\24\1\31\1\22\1\5\1\34\1\26\1\30\1\0\1\23\1\7"+
    "\1\32\1\27\1\17\1\40\1\0\1\21\1\25\1\16\1\11\1\41"+
    "\1\36\1\33\1\37\1\35\1\63\1\60\1\64\1\73\6\0\1\47"+
    "\u1fa2\0\1\47\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\4\1\1\4\1\5\14\1"+
    "\1\6\1\2\1\1\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\2\2\1\34\1\35\1\36\5\0\1\37"+
    "\1\40\1\41\16\0\1\42\1\0\1\43\11\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\2\1\0\1\2"+
    "\1\0\1\62\24\0\1\63\7\0\1\2\1\64\1\65"+
    "\1\66\1\0\1\67\2\0\1\70\4\0\1\71\1\72"+
    "\1\0\1\73\2\0\1\74\10\0\1\75\3\0\1\76"+
    "\1\77\1\0\1\100\1\0\1\101\4\0\1\102\2\0"+
    "\1\103\5\0\1\104\4\0\1\105\1\0\1\106\1\0"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\4\0\1\115"+
    "\2\0\1\116\2\0\1\117\1\120\1\121\1\0\1\122"+
    "\22\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\77\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\77\0\77\0\77\0\77"+
    "\0\u089d\0\77\0\77\0\77\0\77\0\77\0\77\0\u08dc"+
    "\0\u091b\0\u095a\0\77\0\77\0\77\0\u0999\0\u09d8\0\u0a17"+
    "\0\u05e8\0\u0a56\0\77\0\77\0\77\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\77\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc"+
    "\0\77\0\77\0\77\0\u10fb\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\u113a\0\u1179\0\77"+
    "\0\u11b8\0\77\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\77\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\77"+
    "\0\77\0\77\0\u18db\0\77\0\u191a\0\u1959\0\77\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\77\0\77\0\u1a94\0\77\0\u1ad3"+
    "\0\u1b12\0\77\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\77\0\u1d49\0\u1d88\0\u1dc7\0\77\0\77"+
    "\0\u1e06\0\77\0\u1e45\0\77\0\u1e84\0\u1ec3\0\u1f02\0\u1f41"+
    "\0\77\0\u1f80\0\u1fbf\0\77\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u20fa\0\77\0\u2139\0\u2178\0\u21b7\0\u21f6\0\77\0\u2235"+
    "\0\77\0\u2274\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\77\0\u23af\0\u23ee\0\77"+
    "\0\u242d\0\u246c\0\77\0\77\0\77\0\u24ab\0\77\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\2\1\20\1\21\2\2\1\22\1\23"+
    "\2\2\1\24\1\2\1\25\1\2\1\26\1\27\1\30"+
    "\1\2\1\31\1\2\1\32\1\0\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\32\1\2\100\0\1\3\1\0\1\60"+
    "\3\0\4\61\7\0\1\60\17\0\1\3\5\0\1\62"+
    "\32\0\1\63\44\0\1\64\1\65\33\0\1\66\7\0"+
    "\1\67\76\0\1\70\123\0\1\71\61\0\1\72\63\0"+
    "\1\73\35\0\1\74\76\0\1\75\35\0\1\76\124\0"+
    "\1\77\60\0\1\100\77\0\1\101\63\0\1\102\17\0"+
    "\1\103\3\0\1\104\60\0\1\105\1\0\1\106\6\0"+
    "\1\107\66\0\1\110\7\0\1\111\1\0\1\112\5\0"+
    "\1\113\45\0\1\114\21\0\1\115\66\0\1\116\2\0"+
    "\1\117\73\0\1\120\105\0\1\121\61\0\1\122\104\0"+
    "\1\123\60\0\1\3\1\0\1\60\3\0\4\61\7\0"+
    "\1\60\10\0\1\124\6\0\1\3\1\124\4\0\1\62"+
    "\26\0\44\125\1\0\1\126\31\125\1\0\1\62\40\0"+
    "\1\62\5\0\1\127\77\0\1\130\1\131\76\0\1\132"+
    "\76\0\1\133\1\134\1\0\1\46\10\0\1\54\62\0"+
    "\1\135\1\0\1\136\73\0\1\47\1\137\76\0\1\140"+
    "\3\0\1\141\72\0\1\142\76\0\1\143\5\0\1\144"+
    "\70\0\1\145\75\0\1\55\26\0\1\146\2\0\1\147"+
    "\35\0\1\146\11\0\1\147\31\0\4\61\65\0\1\62"+
    "\1\0\1\60\1\0\4\150\11\0\1\60\17\0\1\62"+
    "\53\0\1\151\100\0\1\152\104\0\1\153\74\0\1\154"+
    "\2\0\1\155\64\0\1\156\120\0\1\157\60\0\1\160"+
    "\72\0\1\161\15\0\1\162\67\0\1\163\62\0\1\164"+
    "\103\0\1\165\105\0\1\166\100\0\1\167\64\0\1\170"+
    "\76\0\1\171\3\0\1\172\74\0\1\173\113\0\1\174"+
    "\1\175\71\0\1\176\64\0\1\177\71\0\1\200\72\0"+
    "\1\201\107\0\1\202\110\0\1\203\66\0\1\204\65\0"+
    "\1\205\20\0\1\206\47\0\3\207\1\0\2\207\6\0"+
    "\1\207\2\0\1\207\1\0\1\207\1\0\1\207\4\0"+
    "\1\207\10\0\1\207\34\0\44\125\1\150\1\126\77\125"+
    "\2\0\27\125\50\0\1\210\100\0\1\211\76\0\1\212"+
    "\25\0\1\146\3\0\4\150\31\0\1\146\35\0\1\146"+
    "\40\0\1\146\51\0\1\213\115\0\1\214\72\0\1\215"+
    "\65\0\1\216\76\0\1\217\101\0\1\220\71\0\1\221"+
    "\72\0\1\222\115\0\1\223\70\0\1\224\106\0\1\225"+
    "\66\0\1\226\76\0\1\227\72\0\1\230\6\0\1\231"+
    "\72\0\1\232\73\0\1\233\71\0\1\234\106\0\1\235"+
    "\104\0\1\236\71\0\1\237\72\0\1\240\100\0\1\241"+
    "\73\0\1\242\100\0\1\243\66\0\1\244\76\0\1\245"+
    "\104\0\1\246\112\0\1\247\46\0\3\207\1\0\2\207"+
    "\4\61\2\0\1\207\2\0\1\207\1\0\1\207\1\0"+
    "\1\207\4\0\1\207\10\0\1\207\52\0\1\250\114\0"+
    "\1\251\71\0\1\252\100\0\1\253\70\0\1\254\74\0"+
    "\1\255\102\0\1\256\72\0\1\257\105\0\1\260\64\0"+
    "\1\261\110\0\1\262\72\0\1\263\70\0\1\264\102\0"+
    "\1\265\73\0\1\266\103\0\1\267\61\0\1\270\100\0"+
    "\1\271\107\0\1\272\104\0\1\273\64\0\1\274\107\0"+
    "\1\275\71\0\1\276\103\0\1\277\65\0\1\300\107\0"+
    "\1\301\76\0\1\302\73\0\1\303\70\0\1\304\111\0"+
    "\1\305\52\0\1\306\117\0\1\307\72\0\1\310\63\0"+
    "\1\311\113\0\1\312\102\0\1\313\70\0\1\314\61\0"+
    "\1\315\113\0\1\316\65\0\1\317\103\0\1\320\105\0"+
    "\1\321\60\0\1\322\120\0\1\323\66\0\1\324\77\0"+
    "\1\325\72\0\1\326\102\0\1\327\71\0\1\330\77\0"+
    "\1\331\110\0\1\332\72\0\1\333\113\0\1\334\54\0"+
    "\1\335\107\0\1\336\77\0\1\337\77\0\1\340\61\0"+
    "\1\341\111\0\1\342\75\0\1\343\145\0\1\344\16\0"+
    "\1\345\101\0\1\346\105\0\1\347\75\0\1\350\103\0"+
    "\1\351\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\12\1\4\11\1\1\6\11"+
    "\1\0\2\1\3\11\5\0\3\11\16\0\1\11\1\0"+
    "\1\1\11\0\1\1\3\11\1\1\11\11\1\1\1\0"+
    "\1\11\1\0\1\11\24\0\1\11\7\0\1\1\3\11"+
    "\1\0\1\11\2\0\1\11\4\0\2\11\1\0\1\11"+
    "\2\0\1\11\10\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\11\4\0\1\11\2\0\1\11\5\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\6\11\4\0\1\11"+
    "\2\0\1\11\2\0\3\11\1\0\1\11\21\0\1\10";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore bad characters */
            } 
            // fall through
          case 83: break;
          case 2: 
            { return symbol(CONSTANT);
            } 
            // fall through
          case 84: break;
          case 3: 
            { return symbol('-');
            } 
            // fall through
          case 85: break;
          case 4: 
            { return symbol('/');
            } 
            // fall through
          case 86: break;
          case 5: 
            { return symbol('*');
            } 
            // fall through
          case 87: break;
          case 6: 
            { 
            } 
            // fall through
          case 88: break;
          case 7: 
            { return symbol('.');
            } 
            // fall through
          case 89: break;
          case 8: 
            { return symbol('>');
            } 
            // fall through
          case 90: break;
          case 9: 
            { return symbol('=');
            } 
            // fall through
          case 91: break;
          case 10: 
            { return symbol('<');
            } 
            // fall through
          case 92: break;
          case 11: 
            { return symbol('+');
            } 
            // fall through
          case 93: break;
          case 12: 
            { return symbol('%');
            } 
            // fall through
          case 94: break;
          case 13: 
            { return symbol('&');
            } 
            // fall through
          case 95: break;
          case 14: 
            { return symbol('^');
            } 
            // fall through
          case 96: break;
          case 15: 
            { return symbol('|');
            } 
            // fall through
          case 97: break;
          case 16: 
            { return symbol('!');
            } 
            // fall through
          case 98: break;
          case 17: 
            { return symbol(';');
            } 
            // fall through
          case 99: break;
          case 18: 
            { return symbol('{');
            } 
            // fall through
          case 100: break;
          case 19: 
            { return symbol('}');
            } 
            // fall through
          case 101: break;
          case 20: 
            { return symbol(',');
            } 
            // fall through
          case 102: break;
          case 21: 
            { return symbol(':');
            } 
            // fall through
          case 103: break;
          case 22: 
            { return symbol('(');
            } 
            // fall through
          case 104: break;
          case 23: 
            { return symbol(')');
            } 
            // fall through
          case 105: break;
          case 24: 
            { return symbol('[');
            } 
            // fall through
          case 106: break;
          case 25: 
            { return symbol(']');
            } 
            // fall through
          case 107: break;
          case 26: 
            { return symbol('~');
            } 
            // fall through
          case 108: break;
          case 27: 
            { return symbol('?');
            } 
            // fall through
          case 109: break;
          case 28: 
            { return symbol(DEC_OP);
            } 
            // fall through
          case 110: break;
          case 29: 
            { return symbol(PTR_OP);
            } 
            // fall through
          case 111: break;
          case 30: 
            { return symbol(SUB_ASSIGN);
            } 
            // fall through
          case 112: break;
          case 31: 
            { return symbol(COMMENT);
            } 
            // fall through
          case 113: break;
          case 32: 
            { return symbol(DIV_ASSIGN);
            } 
            // fall through
          case 114: break;
          case 33: 
            { return symbol(MUL_ASSIGN);
            } 
            // fall through
          case 115: break;
          case 34: 
            { return symbol(IF);
            } 
            // fall through
          case 116: break;
          case 35: 
            { return symbol(DO);
            } 
            // fall through
          case 117: break;
          case 36: 
            { return symbol(RIGHT_OP);
            } 
            // fall through
          case 118: break;
          case 37: 
            { return symbol(GE_OP);
            } 
            // fall through
          case 119: break;
          case 38: 
            { return symbol(EQ_OP);
            } 
            // fall through
          case 120: break;
          case 39: 
            { return symbol(LE_OP);
            } 
            // fall through
          case 121: break;
          case 40: 
            { return symbol(LEFT_OP);
            } 
            // fall through
          case 122: break;
          case 41: 
            { return symbol(ADD_ASSIGN);
            } 
            // fall through
          case 123: break;
          case 42: 
            { return symbol(INC_OP);
            } 
            // fall through
          case 124: break;
          case 43: 
            { return symbol(MOD_ASSIGN);
            } 
            // fall through
          case 125: break;
          case 44: 
            { return symbol(AND_ASSIGN);
            } 
            // fall through
          case 126: break;
          case 45: 
            { return symbol(AND_OP);
            } 
            // fall through
          case 127: break;
          case 46: 
            { return symbol(XOR_ASSIGN);
            } 
            // fall through
          case 128: break;
          case 47: 
            { return symbol(OR_ASSIGN);
            } 
            // fall through
          case 129: break;
          case 48: 
            { return symbol(OR_OP);
            } 
            // fall through
          case 130: break;
          case 49: 
            { return symbol(NE_OP);
            } 
            // fall through
          case 131: break;
          case 50: 
            { return symbol(FOR);
            } 
            // fall through
          case 132: break;
          case 51: 
            { return symbol(INT);
            } 
            // fall through
          case 133: break;
          case 52: 
            { return symbol(ELLIPSIS);
            } 
            // fall through
          case 134: break;
          case 53: 
            { return symbol(RIGHT_ASSIGN);
            } 
            // fall through
          case 135: break;
          case 54: 
            { return symbol(LEFT_ASSIGN);
            } 
            // fall through
          case 136: break;
          case 55: 
            { return symbol(LONG);
            } 
            // fall through
          case 137: break;
          case 56: 
            { return symbol(AUTO);
            } 
            // fall through
          case 138: break;
          case 57: 
            { return symbol(ELSE);
            } 
            // fall through
          case 139: break;
          case 58: 
            { return symbol(ENUM);
            } 
            // fall through
          case 140: break;
          case 59: 
            { return symbol(CASE);
            } 
            // fall through
          case 141: break;
          case 60: 
            { return symbol(CHAR);
            } 
            // fall through
          case 142: break;
          case 61: 
            { return symbol(GOTO);
            } 
            // fall through
          case 143: break;
          case 62: 
            { return symbol(VOID);
            } 
            // fall through
          case 144: break;
          case 63: 
            { return symbol(FLOAT);
            } 
            // fall through
          case 145: break;
          case 64: 
            { return symbol(UNION);
            } 
            // fall through
          case 146: break;
          case 65: 
            { return symbol(BREAK);
            } 
            // fall through
          case 147: break;
          case 66: 
            { return symbol(CONST);
            } 
            // fall through
          case 148: break;
          case 67: 
            { return symbol(SHORT);
            } 
            // fall through
          case 149: break;
          case 68: 
            { return symbol(WHILE);
            } 
            // fall through
          case 150: break;
          case 69: 
            { return symbol(RETURN);
            } 
            // fall through
          case 151: break;
          case 70: 
            { return symbol(EXTERN);
            } 
            // fall through
          case 152: break;
          case 71: 
            { return symbol(STATIC);
            } 
            // fall through
          case 153: break;
          case 72: 
            { return symbol(STRUCT);
            } 
            // fall through
          case 154: break;
          case 73: 
            { return symbol(SIGNED);
            } 
            // fall through
          case 155: break;
          case 74: 
            { return symbol(SIZEOF);
            } 
            // fall through
          case 156: break;
          case 75: 
            { return symbol(SWITCH);
            } 
            // fall through
          case 157: break;
          case 76: 
            { return symbol(DOUBLE);
            } 
            // fall through
          case 158: break;
          case 77: 
            { return symbol(TYPEDEF);
            } 
            // fall through
          case 159: break;
          case 78: 
            { return symbol(DEFAULT);
            } 
            // fall through
          case 160: break;
          case 79: 
            { return symbol(UNSIGNED);
            } 
            // fall through
          case 161: break;
          case 80: 
            { return symbol(REGISTER);
            } 
            // fall through
          case 162: break;
          case 81: 
            { return symbol(CONTINUE);
            } 
            // fall through
          case 163: break;
          case 82: 
            { return symbol(VOLATILE);
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
