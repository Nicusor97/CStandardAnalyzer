package com.analizor;

/* The following code was generated by JFlex 1.7.0 */

   
/* --------------------------Usercode Section------------------------ */
   
import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>E:/CAnalyzer/CAnalyzer/src/main/jflex/jflex_Sample1.flex</tt>
 */
class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\72\1\5\1\3\22\0\1\5\1\62\1\20"+
    "\2\0\1\60\1\61\1\12\1\7\1\17\1\22\1\56\1\66\1\57"+
    "\1\6\1\21\1\16\11\1\1\67\1\63\1\55\1\54\1\53\1\71"+
    "\1\0\32\2\1\10\1\15\1\13\1\11\2\0\1\23\1\27\1\33"+
    "\1\40\1\31\1\41\1\45\1\35\1\37\1\2\1\32\1\42\1\43"+
    "\1\36\1\26\1\51\1\2\1\30\1\34\1\25\1\24\1\52\1\47"+
    "\1\44\1\50\1\46\1\64\1\14\1\65\1\70\6\0\1\72\u1fa2\0"+
    "\1\72\1\72\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\17\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\4\0\1\35\1\36\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\20\0\1\44\1\45\7\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\24\0\1\2\2\0\1\65"+
    "\6\0\1\66\1\67\1\0\1\70\6\0\1\71\1\72"+
    "\1\0\1\73\2\0\1\74\11\0\1\75\1\76\1\0"+
    "\1\77\3\0\1\100\1\0\1\101\4\0\1\102\2\0"+
    "\1\103\5\0\1\34\1\104\4\0\1\105\1\0\1\106"+
    "\1\0\1\107\1\110\1\111\1\112\1\113\1\114\4\0"+
    "\1\115\2\0\1\116\2\0\1\117\1\120\1\121\1\122"+
    "\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\73\0\u0127\0\u0162"+
    "\0\73\0\u019d\0\73\0\u01d8\0\73\0\u0213\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\73"+
    "\0\73\0\73\0\73\0\u0811\0\73\0\73\0\u084c\0\u0887"+
    "\0\354\0\u08c2\0\u08fd\0\u0938\0\73\0\354\0\73\0\u0213"+
    "\0\73\0\73\0\73\0\73\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\73\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\73\0\73"+
    "\0\73\0\u0f36\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u0f71\0\u0fac\0\u0fe7\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\73\0\u140d\0\u1448\0\73\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\73\0\73\0\u15e5\0\73\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\73\0\73\0\u1782\0\73"+
    "\0\u17bd\0\u17f8\0\73\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\73\0\73\0\u1a46\0\73"+
    "\0\u1a81\0\u1abc\0\u1af7\0\73\0\u1b32\0\73\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\73\0\u1c59\0\u1c94\0\73\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\73\0\73\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\73\0\u1ee2\0\73\0\u1f1d\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\73"+
    "\0\u2044\0\u207f\0\73\0\u20ba\0\u20f5\0\73\0\73\0\73"+
    "\0\73\0\u2130\0\u216b\0\u21a6\0\u21e1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\2\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\1\2\1\27\1\30\2\2\1\31\1\32"+
    "\1\33\1\34\2\2\1\35\1\2\1\36\2\2\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\75\0"+
    "\1\3\1\57\3\0\1\60\7\0\1\3\4\0\30\57"+
    "\23\0\1\61\1\5\7\0\1\61\4\0\1\62\54\0"+
    "\2\61\7\0\1\61\4\0\1\62\57\0\1\63\74\0"+
    "\1\64\136\0\1\65\21\0\2\61\7\0\1\66\4\0"+
    "\1\62\32\0\1\67\16\0\20\70\1\71\52\70\22\0"+
    "\1\72\31\0\1\73\72\0\1\74\42\0\1\75\104\0"+
    "\1\76\104\0\1\77\52\0\1\100\73\0\1\101\77\0"+
    "\1\102\3\0\1\103\1\0\1\104\51\0\1\105\2\0"+
    "\1\106\6\0\1\107\62\0\1\110\7\0\1\111\1\0"+
    "\1\112\7\0\1\113\61\0\1\114\2\0\1\115\57\0"+
    "\1\116\2\0\1\117\67\0\1\120\13\0\1\121\56\0"+
    "\1\122\72\0\1\123\101\0\1\124\63\0\1\125\117\0"+
    "\1\126\1\127\72\0\1\130\72\0\1\131\1\132\2\0"+
    "\1\51\6\0\1\11\57\0\1\133\1\0\1\134\67\0"+
    "\1\135\1\136\2\0\1\137\66\0\1\52\1\140\72\0"+
    "\1\141\4\0\1\142\65\0\1\143\71\0\1\13\20\0"+
    "\2\57\13\0\1\57\4\0\30\57\21\0\1\60\14\0"+
    "\1\60\76\0\1\72\56\0\1\144\75\0\1\145\106\0"+
    "\1\146\101\0\1\147\2\0\1\150\104\0\1\151\52\0"+
    "\1\152\66\0\1\153\17\0\1\154\51\0\1\155\102\0"+
    "\1\156\63\0\1\157\101\0\1\160\74\0\1\161\57\0"+
    "\1\162\72\0\1\163\4\0\1\164\70\0\1\165\111\0"+
    "\1\166\1\167\63\0\1\170\60\0\1\171\71\0\1\172"+
    "\107\0\1\173\61\0\1\174\70\0\1\175\102\0\1\176"+
    "\61\0\1\177\104\0\1\200\72\0\1\201\2\0\1\202"+
    "\104\0\1\203\72\0\1\204\21\0\1\205\115\0\1\206"+
    "\103\0\1\207\61\0\1\210\75\0\1\211\64\0\1\212"+
    "\73\0\1\213\105\0\1\214\76\0\1\215\60\0\1\216"+
    "\72\0\1\217\72\0\1\220\66\0\1\221\6\0\1\222"+
    "\66\0\1\223\67\0\1\224\71\0\1\225\76\0\1\226"+
    "\100\0\1\227\65\0\1\230\66\0\1\231\74\0\1\232"+
    "\66\0\1\233\72\0\1\234\114\0\1\235\53\0\1\236"+
    "\106\0\1\237\70\0\1\240\55\0\1\241\60\0\1\242"+
    "\126\0\1\243\63\0\1\244\74\0\1\245\64\0\1\246"+
    "\70\0\1\247\76\0\1\250\66\0\1\251\101\0\1\252"+
    "\60\0\1\253\104\0\1\254\66\0\1\255\64\0\1\256"+
    "\76\0\1\257\67\0\1\260\77\0\1\261\101\0\1\262"+
    "\54\0\1\263\73\0\1\264\76\0\1\265\66\0\1\266"+
    "\51\0\1\267\124\0\1\270\65\0\1\271\77\0\1\272"+
    "\61\0\1\273\103\0\1\274\72\0\1\275\67\0\1\276"+
    "\64\0\1\277\105\0\1\300\73\0\1\301\66\0\1\302"+
    "\66\0\1\303\103\0\1\304\67\0\1\305\44\0\1\306"+
    "\112\0\1\307\102\0\1\310\62\0\1\311\65\0\1\312"+
    "\73\0\1\313\107\0\1\314\42\0\1\315\120\0\1\316"+
    "\62\0\1\317\73\0\1\320\72\0\1\321\54\0\1\322"+
    "\73\0\1\323\73\0\1\324\73\0\1\325\73\0\1\223"+
    "\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\32\1\4\11\1\1\2\11\2\1\4\0"+
    "\1\11\1\1\1\11\1\0\4\11\20\0\1\11\1\1"+
    "\7\0\1\1\3\11\1\1\12\11\24\0\1\11\2\0"+
    "\1\11\6\0\2\11\1\0\1\11\6\0\2\11\1\0"+
    "\1\11\2\0\1\11\11\0\2\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\4\0\1\11\2\0\1\11\5\0"+
    "\2\11\4\0\1\11\1\0\1\11\1\0\6\11\4\0"+
    "\1\11\2\0\1\11\2\0\4\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
	public String toString() {
          return ("line : " + (this.yyline + 1) + ", column : " + this.yycolumn + ", value :" + this.yytext());
   }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            } 
            // fall through
          case 83: break;
          case 2: 
            { return symbol(INT, yytext().trim());
            } 
            // fall through
          case 84: break;
          case 3: 
            { 
            } 
            // fall through
          case 85: break;
          case 4: 
            { return symbol('.', yytext().trim());
            } 
            // fall through
          case 86: break;
          case 5: 
            { return symbol('(', yytext().trim());
            } 
            // fall through
          case 87: break;
          case 6: 
            { return symbol('[', yytext().trim());
            } 
            // fall through
          case 88: break;
          case 7: 
            { return symbol('^', yytext().trim());
            } 
            // fall through
          case 89: break;
          case 8: 
            { return symbol(']', yytext().trim());
            } 
            // fall through
          case 90: break;
          case 9: 
            { return symbol('|', yytext().trim());
            } 
            // fall through
          case 91: break;
          case 10: 
            { return symbol(')', yytext().trim());
            } 
            // fall through
          case 92: break;
          case 11: 
            { return symbol('/', yytext().trim());
            } 
            // fall through
          case 93: break;
          case 12: 
            { return symbol('*', yytext().trim());
            } 
            // fall through
          case 94: break;
          case 13: 
            { return symbol('>', yytext().trim());
            } 
            // fall through
          case 95: break;
          case 14: 
            { return symbol('=', yytext().trim());
            } 
            // fall through
          case 96: break;
          case 15: 
            { return symbol('<', yytext().trim());
            } 
            // fall through
          case 97: break;
          case 16: 
            { return symbol('+', yytext().trim());
            } 
            // fall through
          case 98: break;
          case 17: 
            { return symbol('-', yytext().trim());
            } 
            // fall through
          case 99: break;
          case 18: 
            { return symbol('%', yytext().trim());
            } 
            // fall through
          case 100: break;
          case 19: 
            { return symbol('&', yytext().trim());
            } 
            // fall through
          case 101: break;
          case 20: 
            { return symbol('!', yytext().trim());
            } 
            // fall through
          case 102: break;
          case 21: 
            { return symbol(';', yytext().trim());
            } 
            // fall through
          case 103: break;
          case 22: 
            { return symbol('{', yytext().trim());
            } 
            // fall through
          case 104: break;
          case 23: 
            { return symbol('}', yytext().trim());
            } 
            // fall through
          case 105: break;
          case 24: 
            { return symbol(',', yytext().trim());
            } 
            // fall through
          case 106: break;
          case 25: 
            { return symbol(':', yytext().trim());
            } 
            // fall through
          case 107: break;
          case 26: 
            { return symbol('~', yytext().trim());
            } 
            // fall through
          case 108: break;
          case 27: 
            { return symbol('?', yytext().trim());
            } 
            // fall through
          case 109: break;
          case 28: 
            { return symbol(FLOAT, yytext().trim());
            } 
            // fall through
          case 110: break;
          case 29: 
            { return symbol(XOR_ASSIGN, yytext().trim());
            } 
            // fall through
          case 111: break;
          case 30: 
            { return symbol(OR_OP, yytext().trim());
            } 
            // fall through
          case 112: break;
          case 31: 
            { return symbol(OR_ASSIGN, yytext().trim());
            } 
            // fall through
          case 113: break;
          case 32: 
            { return symbol(STRING, yytext().trim());
            } 
            // fall through
          case 114: break;
          case 33: 
            { return symbol(COMMENT, yytext().trim());
            } 
            // fall through
          case 115: break;
          case 34: 
            { return symbol(DIV_ASSIGN, yytext().trim());
            } 
            // fall through
          case 116: break;
          case 35: 
            { return symbol(MUL_ASSIGN, yytext().trim());
            } 
            // fall through
          case 117: break;
          case 36: 
            { return symbol(IF, yytext().trim());
            } 
            // fall through
          case 118: break;
          case 37: 
            { return symbol(DO, yytext().trim());
            } 
            // fall through
          case 119: break;
          case 38: 
            { return symbol(RIGHT_OP, yytext().trim());
            } 
            // fall through
          case 120: break;
          case 39: 
            { return symbol(GE_OP, yytext().trim());
            } 
            // fall through
          case 121: break;
          case 40: 
            { return symbol(EQ_OP, yytext().trim());
            } 
            // fall through
          case 122: break;
          case 41: 
            { return symbol(LE_OP, yytext().trim());
            } 
            // fall through
          case 123: break;
          case 42: 
            { return symbol(LEFT_OP, yytext().trim());
            } 
            // fall through
          case 124: break;
          case 43: 
            { return symbol(ADD_ASSIGN, yytext().trim());
            } 
            // fall through
          case 125: break;
          case 44: 
            { return symbol(INC_OP, yytext().trim());
            } 
            // fall through
          case 126: break;
          case 45: 
            { return symbol(PTR_OP, yytext().trim());
            } 
            // fall through
          case 127: break;
          case 46: 
            { return symbol(SUB_ASSIGN, yytext().trim());
            } 
            // fall through
          case 128: break;
          case 47: 
            { return symbol(DEC_OP, yytext().trim());
            } 
            // fall through
          case 129: break;
          case 48: 
            { return symbol(MOD_ASSIGN, yytext().trim());
            } 
            // fall through
          case 130: break;
          case 49: 
            { return symbol(AND_ASSIGN, yytext().trim());
            } 
            // fall through
          case 131: break;
          case 50: 
            { return symbol(AND_OP, yytext().trim());
            } 
            // fall through
          case 132: break;
          case 51: 
            { return symbol(NE_OP, yytext().trim());
            } 
            // fall through
          case 133: break;
          case 52: 
            { return symbol(ELLIPSIS, yytext().trim());
            } 
            // fall through
          case 134: break;
          case 53: 
            { return symbol(FOR, yytext().trim());
            } 
            // fall through
          case 135: break;
          case 54: 
            { return symbol(RIGHT_ASSIGN, yytext().trim());
            } 
            // fall through
          case 136: break;
          case 55: 
            { return symbol(LEFT_ASSIGN, yytext().trim());
            } 
            // fall through
          case 137: break;
          case 56: 
            { return symbol(AUTO, yytext().trim());
            } 
            // fall through
          case 138: break;
          case 57: 
            { return symbol(ENUM, yytext().trim());
            } 
            // fall through
          case 139: break;
          case 58: 
            { return symbol(ELSE, yytext().trim());
            } 
            // fall through
          case 140: break;
          case 59: 
            { return symbol(CASE, yytext().trim());
            } 
            // fall through
          case 141: break;
          case 60: 
            { return symbol(CHAR, yytext().trim());
            } 
            // fall through
          case 142: break;
          case 61: 
            { return symbol(LONG, yytext().trim());
            } 
            // fall through
          case 143: break;
          case 62: 
            { return symbol(GOTO, yytext().trim());
            } 
            // fall through
          case 144: break;
          case 63: 
            { return symbol(VOID, yytext().trim());
            } 
            // fall through
          case 145: break;
          case 64: 
            { return symbol(UNION, yytext().trim());
            } 
            // fall through
          case 146: break;
          case 65: 
            { return symbol(BREAK, yytext().trim());
            } 
            // fall through
          case 147: break;
          case 66: 
            { return symbol(CONST, yytext().trim());
            } 
            // fall through
          case 148: break;
          case 67: 
            { return symbol(SHORT, yytext().trim());
            } 
            // fall through
          case 149: break;
          case 68: 
            { return symbol(WHILE, yytext().trim());
            } 
            // fall through
          case 150: break;
          case 69: 
            { return symbol(RETURN, yytext().trim());
            } 
            // fall through
          case 151: break;
          case 70: 
            { return symbol(EXTERN, yytext().trim());
            } 
            // fall through
          case 152: break;
          case 71: 
            { return symbol(STATIC, yytext().trim());
            } 
            // fall through
          case 153: break;
          case 72: 
            { return symbol(STRUCT, yytext().trim());
            } 
            // fall through
          case 154: break;
          case 73: 
            { return symbol(SIGNED, yytext().trim());
            } 
            // fall through
          case 155: break;
          case 74: 
            { return symbol(SIZEOF, yytext().trim());
            } 
            // fall through
          case 156: break;
          case 75: 
            { return symbol(SWITCH, yytext().trim());
            } 
            // fall through
          case 157: break;
          case 76: 
            { return symbol(DOUBLE, yytext().trim());
            } 
            // fall through
          case 158: break;
          case 77: 
            { return symbol(TYPEDEF, yytext().trim());
            } 
            // fall through
          case 159: break;
          case 78: 
            { return symbol(DEFAULT, yytext().trim());
            } 
            // fall through
          case 160: break;
          case 79: 
            { return symbol(UNSIGNED, yytext().trim());
            } 
            // fall through
          case 161: break;
          case 80: 
            { return symbol(REGISTER, yytext().trim());
            } 
            // fall through
          case 162: break;
          case 81: 
            { return symbol(CONTINUE, yytext().trim());
            } 
            // fall through
          case 163: break;
          case 82: 
            { return symbol(VOLATILE, yytext().trim());
            } 
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
